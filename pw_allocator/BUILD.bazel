# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load(
    "//pw_build:pigweed.bzl",
    "pw_cc_test",
)

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

# Libraries

cc_library(
    name = "allocator",
    srcs = [
        "allocator.cc",
    ],
    hdrs = [
        "public/pw_allocator/allocator.h",
    ],
    includes = ["public"],
    deps = [
        "//pw_assert",
        "//pw_preprocessor",
        "//pw_result",
        "//pw_status",
    ],
)

cc_library(
    name = "block",
    srcs = ["block.cc"],
    hdrs = [
        "public/pw_allocator/block.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_assert",
        "//pw_bytes",
        "//pw_bytes:alignment",
        "//pw_result",
        "//pw_status",
    ],
)

cc_library(
    name = "block_allocator",
    srcs = ["block_allocator.cc"],
    hdrs = [
        "public/pw_allocator/block_allocator.h",
    ],
    deps = [
        ":allocator",
        ":block",
        "//pw_assert",
        "//pw_bytes",
        "//pw_result",
        "//pw_status",
    ],
)

cc_library(
    name = "buffer",
    hdrs = [
        "public/pw_allocator/buffer.h",
    ],
    includes = ["public"],
)

cc_library(
    name = "fallback_allocator",
    hdrs = [
        "public/pw_allocator/fallback_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        ":tracking_allocator",
        "//pw_metric:metric",
        "//pw_result",
        "//pw_status",
        "//pw_tokenizer",
    ],
)

cc_library(
    name = "freelist",
    srcs = [
        "freelist.cc",
    ],
    hdrs = [
        "public/pw_allocator/freelist.h",
    ],
    includes = ["public"],
    deps = [
        "//pw_containers",
        "//pw_span",
        "//pw_status",
    ],
)

cc_library(
    name = "freelist_heap",
    srcs = [
        "freelist_heap.cc",
    ],
    hdrs = [
        "public/pw_allocator/freelist_heap.h",
    ],
    includes = ["public"],
    deps = [
        ":block",
        ":freelist",
        "//pw_log",
    ],
)

cc_library(
    name = "libc_allocator",
    srcs = [
        "libc_allocator.cc",
    ],
    hdrs = [
        "public/pw_allocator/libc_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
    ],
)

cc_library(
    name = "multiplex_allocator",
    hdrs = [
        "public/pw_allocator/multiplex_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_containers:flat_map",
        "//pw_result",
        "//pw_status",
        "//pw_tokenizer",
    ],
)

cc_library(
    name = "null_allocator",
    hdrs = [
        "public/pw_allocator/null_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
    ],
)

cc_library(
    name = "synchronized_allocator",
    hdrs = [
        "public/pw_allocator/synchronized_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_sync:borrow",
    ],
)

cc_library(
    name = "tracking_allocator",
    hdrs = [
        "public/pw_allocator/metrics.h",
        "public/pw_allocator/tracking_allocator.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_assert",
        "//pw_metric:metric",
        "//pw_status",
    ],
)

# Test support

cc_library(
    name = "testing",
    testonly = True,
    srcs = [
        "testing.cc",
    ],
    hdrs = [
        "public/pw_allocator/testing.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        ":block",
        ":block_allocator",
        ":buffer",
        ":tracking_allocator",
        "//pw_assert",
        "//pw_bytes",
        "//pw_result",
        "//pw_status",
        "//pw_unit_test",
    ],
)

cc_library(
    name = "test_harness",
    testonly = True,
    srcs = [
        "test_harness.cc",
    ],
    hdrs = [
        "public/pw_allocator/test_harness.h",
    ],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_assert",
        "//pw_containers",
        "//pw_random",
        "//third_party/fuchsia:stdcompat",
    ],
)

cc_library(
    name = "fuzzing",
    testonly = True,
    srcs = [
        "fuzzing.cc",
    ],
    hdrs = [
        "public/pw_allocator/fuzzing.h",
    ],
    includes = ["public"],
    deps = [
        ":test_harness",
        "//pw_fuzzer:fuzztest",
    ],
)

# Tests

pw_cc_test(
    name = "allocator_test",
    srcs = [
        "allocator_test.cc",
    ],
    deps = [
        ":allocator",
        ":testing",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "block_test",
    srcs = [
        "block_test.cc",
    ],
    deps = [
        ":block",
        "//pw_span",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "block_allocator_test",
    srcs = [
        "block_allocator_test.cc",
    ],
    deps = [
        ":block",
        ":block_allocator",
        ":buffer",
        "//pw_bytes",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "fallback_allocator_test",
    srcs = [
        "fallback_allocator_test.cc",
    ],
    deps = [
        ":fallback_allocator",
        ":testing",
        "//pw_status",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "freelist_test",
    srcs = [
        "freelist_test.cc",
    ],
    deps = [
        ":freelist",
        "//pw_span",
        "//pw_status",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "freelist_heap_test",
    srcs = [
        "freelist_heap_test.cc",
    ],
    deps = [
        ":freelist_heap",
    ],
)

pw_cc_test(
    name = "libc_allocator_test",
    srcs = [
        "libc_allocator_test.cc",
    ],
    deps = [
        ":libc_allocator",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "null_allocator_test",
    srcs = [
        "null_allocator_test.cc",
    ],
    deps = [
        ":null_allocator",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "synchronized_allocator_test",
    srcs = [
        "synchronized_allocator_test.cc",
    ],
    deps = [
        ":synchronized_allocator",
        ":test_harness",
        ":testing",
        "//pw_random",
        "//pw_sync:binary_semaphore",
        "//pw_sync:interrupt_spin_lock",
        "//pw_sync:mutex",
        "//pw_sync:virtual_basic_lockable",
        "//pw_thread:test_thread_context",
        "//pw_thread:thread",
        "//pw_thread:thread_core",
        "//pw_thread:yield",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "tracking_allocator_test",
    srcs = [
        "tracking_allocator_test.cc",
    ],
    deps = [
        ":testing",
        ":tracking_allocator",
        "//pw_unit_test",
    ],
)

pw_cc_test(
    name = "unique_ptr_test",
    srcs = ["unique_ptr_test.cc"],
    deps = [
        ":allocator",
        ":testing",
        "//pw_unit_test",
    ],
)

# Docs

cc_library(
    name = "size_reporter",
    hdrs = ["public/pw_allocator/size_reporter.h"],
    includes = ["public"],
    deps = [
        ":allocator",
        "//pw_bloat:bloat_this_binary",
        "//pw_bytes",
    ],
)

# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")

pw_executable("base") {
  check_includes = false
  sources = [ "base.cc" ]
  deps = [ "..:size_reporter" ]
}

pw_executable("best_fit_block_allocator") {
  check_includes = false
  sources = [ "best_fit_block_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
  ]
}

pw_executable("dual_first_fit_block_allocator") {
  check_includes = false
  sources = [ "dual_first_fit_block_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
  ]
}

pw_executable("fallback_allocator_base") {
  check_includes = false
  sources = [ "fallback_allocator_base.cc" ]
  deps = [
    "..:block_allocator",
    "..:fallback_allocator",
    "..:size_reporter",
  ]
}

pw_executable("fallback_allocator") {
  check_includes = false
  sources = [ "fallback_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:fallback_allocator",
    "..:size_reporter",
  ]
}

pw_executable("first_fit_block_allocator") {
  check_includes = false
  sources = [ "first_fit_block_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
  ]
}

pw_executable("last_fit_block_allocator") {
  check_includes = false
  sources = [ "last_fit_block_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
  ]
}

pw_executable("libc_allocator") {
  check_includes = false
  sources = [ "libc_allocator.cc" ]
  deps = [
    "..:libc_allocator",
    "..:size_reporter",
  ]
}

pw_executable("null_allocator") {
  check_includes = false
  sources = [ "null_allocator.cc" ]
  deps = [
    "..:null_allocator",
    "..:size_reporter",
  ]
}

pw_executable("synchronized_allocator_isl") {
  check_includes = false
  sources = [ "synchronized_allocator_isl.cc" ]
  deps = [
    "$dir_pw_sync:interrupt_spin_lock",
    "..:block_allocator",
    "..:size_reporter",
    "..:synchronized_allocator",
  ]
}

pw_executable("synchronized_allocator_mutex") {
  check_includes = false
  sources = [ "synchronized_allocator_mutex.cc" ]
  deps = [
    "$dir_pw_sync:mutex",
    "..:block_allocator",
    "..:size_reporter",
    "..:synchronized_allocator",
  ]
}

pw_executable("tracking_allocator_all_metrics") {
  check_includes = false
  sources = [ "tracking_allocator_all_metrics.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
    "..:tracking_allocator",
  ]
}

pw_executable("tracking_allocator_no_metrics") {
  check_includes = false
  sources = [ "tracking_allocator_no_metrics.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
    "..:tracking_allocator",
  ]
}

pw_executable("worst_fit_block_allocator") {
  check_includes = false
  sources = [ "worst_fit_block_allocator.cc" ]
  deps = [
    "..:block_allocator",
    "..:size_reporter",
  ]
}
